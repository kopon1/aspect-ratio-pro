{"mappings":"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","sources":["<anon>","src/js/calculator.js"],"sourcesContent":["let isRatioLocked = true; // Start with ratio locked\nlet ratioWidth = 16;\nlet ratioHeight = 9;\nlet pixelWidth = 1920;\nlet pixelHeight = 1080;\nconst widthInput = document.getElementById('width');\nconst heightInput = document.getElementById('height');\nconst ratioWidthInput = document.getElementById('customWidth');\nconst ratioHeightInput = document.getElementById('customHeight');\nconst resultElement = document.getElementById('result');\nconst simplifiedElement = document.getElementById('simplified');\nconst decimalElement = document.getElementById('decimal');\nconst aspectPreview = document.getElementById('aspectPreview');\nconst resetButton = document.getElementById('resetValues');\nconst lockButton = document.getElementById('lockRatio');\nconst swapButton = document.getElementById('swapDimensions');\n// Navigation and Tab Switching\nconst sections = document.querySelectorAll('.content-section');\nconst navLinks = document.querySelectorAll('.nav-link');\nconst tabButtons = document.querySelectorAll('.tab-btn');\nconst tabContents = document.querySelectorAll('.tab-content');\n// Add status message elements\nconst widthStatus = document.getElementById('widthStatus');\nconst heightStatus = document.getElementById('heightStatus');\nconst ratioStatus = document.getElementById('ratioStatus');\nconst presetStatus = document.getElementById('presetStatus');\nconst customRatioStatus = document.getElementById('customRatioStatus');\nfunction updateDimensions() {\n    // Get current values\n    const widthValue = parseInt(widthInput.value) || 0;\n    const heightValue = parseInt(heightInput.value) || 0;\n    if (!isRatioLocked) {\n        // If ratio is unlocked, just update the display\n        pixelWidth = widthValue;\n        pixelHeight = heightValue;\n        updateDisplay();\n        return;\n    }\n    // If ratio is locked, calculate based on which input was changed\n    if (widthValue !== pixelWidth) {\n        // Width was changed\n        pixelWidth = widthValue;\n        pixelHeight = Math.round(pixelWidth * (ratioHeight / ratioWidth));\n        heightInput.value = pixelHeight;\n    } else if (heightValue !== pixelHeight) {\n        // Height was changed\n        pixelHeight = heightValue;\n        pixelWidth = Math.round(pixelHeight * (ratioWidth / ratioHeight));\n        widthInput.value = pixelWidth;\n    }\n    updateDisplay();\n    updateStatusMessages();\n}\n// Helper function to calculate greatest common divisor\nfunction calculateGCD(a, b) {\n    a = Math.abs(a);\n    b = Math.abs(b);\n    while(b){\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\nfunction updateRatio() {\n    const newWidth = parseFloat(ratioWidthInput.value) || 1;\n    const newHeight = parseFloat(ratioHeightInput.value) || 1;\n    if (newWidth > 0 && newHeight > 0) {\n        // Set the ratio directly\n        ratioWidth = newWidth;\n        ratioHeight = newHeight;\n        // If ratio is locked, update dimensions based on the new ratio\n        if (isRatioLocked) {\n            if (widthInput.value) {\n                const width = parseFloat(widthInput.value);\n                // Calculate height using precise ratio\n                const height = width * ratioHeight / ratioWidth;\n                heightInput.value = height.toFixed(2);\n            } else if (heightInput.value) {\n                const height = parseFloat(heightInput.value);\n                // Calculate width using precise ratio\n                const width = height * ratioWidth / ratioHeight;\n                widthInput.value = width.toFixed(2);\n            }\n        }\n        updateDisplay();\n        updateStatusMessages();\n    }\n}\nfunction toggleRatioLock() {\n    isRatioLocked = !isRatioLocked;\n    if (isRatioLocked) {\n        lockButton.innerHTML = '<i class=\"fas fa-lock\"></i> Ratio Locked';\n        lockButton.classList.add('active');\n    } else {\n        lockButton.innerHTML = '<i class=\"fas fa-lock-open\"></i> Ratio Unlocked';\n        lockButton.classList.remove('active');\n    }\n    updateStatusMessages();\n}\nfunction swapDimensions() {\n    const tempWidth = widthInput.value;\n    const tempHeight = heightInput.value;\n    widthInput.value = tempHeight;\n    heightInput.value = tempWidth;\n    // Update the pixel values\n    pixelWidth = parseInt(widthInput.value) || 0;\n    pixelHeight = parseInt(heightInput.value) || 0;\n    updateDisplay();\n}\nfunction resetCalculator() {\n    // Reset inputs\n    widthInput.value = '';\n    heightInput.value = '';\n    ratioWidthInput.value = '';\n    ratioHeightInput.value = '';\n    // Reset variables\n    ratioWidth = 16;\n    ratioHeight = 9;\n    pixelWidth = 1920;\n    pixelHeight = 1080;\n    isRatioLocked = true;\n    // Update UI\n    lockButton.innerHTML = '<i class=\"fas fa-lock\"></i> Ratio Locked';\n    lockButton.classList.add('active');\n    // Update display\n    updateDisplay();\n}\nfunction updateDisplay() {\n    const width = parseFloat(widthInput.value);\n    const height = parseFloat(heightInput.value);\n    if (!isNaN(width) && !isNaN(height) && width > 0 && height > 0) {\n        // Calculate the actual ratio using GCD\n        const gcd = calculateGCD(Math.round(width), Math.round(height));\n        const ratioW = Math.round(width / gcd);\n        const ratioH = Math.round(height / gcd);\n        // Update the result display\n        resultElement.textContent = `Aspect Ratio: ${ratioW}:${ratioH}`;\n        decimalElement.textContent = `Decimal: ${(width / height).toFixed(3)}:1`;\n        // Update the preview\n        const maxWidth = 400;\n        const maxHeight = 300;\n        const scale = Math.min(maxWidth / width, maxHeight / height);\n        aspectPreview.style.width = `${width * scale}px`;\n        aspectPreview.style.height = `${height * scale}px`;\n        aspectPreview.style.opacity = '1';\n    } else {\n        resultElement.textContent = 'Aspect Ratio: -';\n        decimalElement.textContent = 'Decimal: -';\n        aspectPreview.style.opacity = '0';\n    }\n}\nfunction updateStatusMessages() {\n    // Update width status\n    if (widthInput.value) {\n        widthStatus.textContent = `Width: ${widthInput.value}px`;\n        widthStatus.className = 'status-message success';\n    } else {\n        widthStatus.textContent = 'Enter width to calculate height';\n        widthStatus.className = 'status-message info';\n    }\n    // Update height status\n    if (heightInput.value) {\n        heightStatus.textContent = `Height: ${heightInput.value}px`;\n        heightStatus.className = 'status-message success';\n    } else {\n        heightStatus.textContent = 'Enter height to calculate width';\n        heightStatus.className = 'status-message info';\n    }\n    // Update ratio status\n    if (isRatioLocked) {\n        ratioStatus.textContent = 'Ratio is locked - dimensions will maintain proportion';\n        ratioStatus.className = 'status-message info';\n    } else {\n        ratioStatus.textContent = 'Ratio is unlocked - dimensions can be set independently';\n        ratioStatus.className = 'status-message warning';\n    }\n    // Update custom ratio status\n    if (ratioWidthInput.value && ratioHeightInput.value) {\n        customRatioStatus.textContent = `Custom Aspect Ratio: ${ratioWidthInput.value}:${ratioHeightInput.value}`;\n        customRatioStatus.className = 'status-message success';\n    } else {\n        customRatioStatus.textContent = 'Enter custom ratio values';\n        customRatioStatus.className = 'status-message info';\n    }\n    // Update preset status\n    if (ratioWidthInput.value && ratioHeightInput.value) {\n        presetStatus.textContent = 'Click a ratio to update custom ratio';\n        presetStatus.className = 'status-message info';\n    } else {\n        presetStatus.textContent = 'Click a ratio to set custom ratio';\n        presetStatus.className = 'status-message info';\n    }\n}\n// Event Listeners\nwidthInput.addEventListener('input', ()=>{\n    if (isRatioLocked && ratioWidthInput.value && ratioHeightInput.value) {\n        const width = parseFloat(widthInput.value) || 0;\n        if (width > 0) {\n            const ratioW = parseFloat(ratioWidthInput.value);\n            const ratioH = parseFloat(ratioHeightInput.value);\n            const height = width * ratioH / ratioW;\n            heightInput.value = height.toFixed(2);\n        }\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\nheightInput.addEventListener('input', ()=>{\n    if (isRatioLocked && ratioWidthInput.value && ratioHeightInput.value) {\n        const height = parseFloat(heightInput.value) || 0;\n        if (height > 0) {\n            const ratioW = parseFloat(ratioWidthInput.value);\n            const ratioH = parseFloat(ratioHeightInput.value);\n            const width = height * ratioW / ratioH;\n            widthInput.value = width.toFixed(2);\n        }\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\nratioWidthInput.addEventListener('input', ()=>{\n    updateRatio();\n    if (isRatioLocked && widthInput.value) {\n        const width = parseFloat(widthInput.value);\n        const ratioW = parseFloat(ratioWidthInput.value);\n        const ratioH = parseFloat(ratioHeightInput.value);\n        const height = width * ratioH / ratioW;\n        heightInput.value = height.toFixed(2);\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\nratioHeightInput.addEventListener('input', ()=>{\n    updateRatio();\n    if (isRatioLocked && heightInput.value) {\n        const height = parseFloat(heightInput.value);\n        const ratioW = parseFloat(ratioWidthInput.value);\n        const ratioH = parseFloat(ratioHeightInput.value);\n        const width = height * ratioW / ratioH;\n        widthInput.value = width.toFixed(2);\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\nresetButton.addEventListener('click', resetCalculator);\nlockButton.addEventListener('click', toggleRatioLock);\nswapButton.addEventListener('click', swapDimensions);\n// Preset ratio buttons\ndocument.querySelectorAll('.preset').forEach((button)=>{\n    button.addEventListener('click', ()=>{\n        const [w, h] = button.dataset.ratio.split(':').map(Number);\n        // ONLY update the custom ratio inputs\n        ratioWidthInput.value = w;\n        ratioHeightInput.value = h;\n        // Update preset status\n        presetStatus.textContent = `Selected ratio: ${w}:${h}`;\n        presetStatus.className = 'status-message success';\n        // Trigger the custom ratio update\n        updateRatio();\n    });\n});\n// Navigation event listeners\nnavLinks.forEach((link)=>{\n    link.addEventListener('click', (e)=>{\n        e.preventDefault();\n        const sectionId = e.target.getAttribute('href').substring(1);\n        showSection(sectionId);\n        history.pushState(null, '', `#${sectionId}`);\n    });\n});\n// Tab switching event listeners\ntabButtons.forEach((button)=>{\n    button.addEventListener('click', ()=>{\n        const tabId = button.getAttribute('data-tab');\n        showTab(tabId);\n    });\n});\n// Handle initial state based on URL hash\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    const hash = window.location.hash.substring(1);\n    if (hash) showSection(hash);\n    else showSection('calculator-section');\n    // Set initial state of ratio lock button\n    lockButton.innerHTML = '<i class=\"fas fa-lock\"></i> Ratio Locked';\n    lockButton.classList.add('active');\n    updateDisplay();\n    updateStatusMessages();\n});\n// Handle browser back/forward\nwindow.addEventListener('popstate', ()=>{\n    const hash = window.location.hash.substring(1);\n    if (hash) showSection(hash);\n    else showSection('calculator-section');\n});\nfunction showSection(sectionId) {\n    sections.forEach((section)=>{\n        section.classList.add('hidden');\n    });\n    document.getElementById(sectionId).classList.remove('hidden');\n    // Update active nav link\n    navLinks.forEach((link)=>{\n        link.classList.remove('active');\n        if (link.getAttribute('href') === `#${sectionId}`) link.classList.add('active');\n    });\n}\nfunction showTab(tabId) {\n    tabContents.forEach((content)=>{\n        content.classList.add('hidden');\n    });\n    document.getElementById(tabId).classList.remove('hidden');\n    // Update active tab button\n    tabButtons.forEach((button)=>{\n        button.classList.remove('active');\n        if (button.getAttribute('data-tab') === tabId) button.classList.add('active');\n    });\n}\n\n//# sourceMappingURL=aspect-ratio-pro.6189c723.js.map\n","let isRatioLocked = true; // Start with ratio locked\nlet ratioWidth = 16;\nlet ratioHeight = 9;\nlet pixelWidth = 1920;\nlet pixelHeight = 1080;\n\nconst widthInput = document.getElementById('width');\nconst heightInput = document.getElementById('height');\nconst ratioWidthInput = document.getElementById('customWidth');\nconst ratioHeightInput = document.getElementById('customHeight');\nconst resultElement = document.getElementById('result');\nconst simplifiedElement = document.getElementById('simplified');\nconst decimalElement = document.getElementById('decimal');\nconst aspectPreview = document.getElementById('aspectPreview');\nconst resetButton = document.getElementById('resetValues');\nconst lockButton = document.getElementById('lockRatio');\nconst swapButton = document.getElementById('swapDimensions');\n\n// Navigation and Tab Switching\nconst sections = document.querySelectorAll('.content-section');\nconst navLinks = document.querySelectorAll('.nav-link');\nconst tabButtons = document.querySelectorAll('.tab-btn');\nconst tabContents = document.querySelectorAll('.tab-content');\n\n// Add status message elements\nconst widthStatus = document.getElementById('widthStatus');\nconst heightStatus = document.getElementById('heightStatus');\nconst ratioStatus = document.getElementById('ratioStatus');\nconst presetStatus = document.getElementById('presetStatus');\nconst customRatioStatus = document.getElementById('customRatioStatus');\n\nfunction updateDimensions() {\n    // Get current values\n    const widthValue = parseInt(widthInput.value) || 0;\n    const heightValue = parseInt(heightInput.value) || 0;\n\n    if (!isRatioLocked) {\n        // If ratio is unlocked, just update the display\n        pixelWidth = widthValue;\n        pixelHeight = heightValue;\n        updateDisplay();\n        return;\n}\n\n    // If ratio is locked, calculate based on which input was changed\n    if (widthValue !== pixelWidth) {\n        // Width was changed\n        pixelWidth = widthValue;\n        pixelHeight = Math.round(pixelWidth * (ratioHeight / ratioWidth));\n        heightInput.value = pixelHeight;\n    } else if (heightValue !== pixelHeight) {\n        // Height was changed\n        pixelHeight = heightValue;\n        pixelWidth = Math.round(pixelHeight * (ratioWidth / ratioHeight));\n        widthInput.value = pixelWidth;\n    }\n\n    updateDisplay();\n    updateStatusMessages();\n}\n\n// Helper function to calculate greatest common divisor\nfunction calculateGCD(a, b) {\n    a = Math.abs(a);\n    b = Math.abs(b);\n    while (b) {\n        const temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\nfunction updateRatio() {\n    const newWidth = parseFloat(ratioWidthInput.value) || 1;\n    const newHeight = parseFloat(ratioHeightInput.value) || 1;\n    \n    if (newWidth > 0 && newHeight > 0) {\n        // Set the ratio directly\n        ratioWidth = newWidth;\n        ratioHeight = newHeight;\n        \n        // If ratio is locked, update dimensions based on the new ratio\n        if (isRatioLocked) {\n            if (widthInput.value) {\n                const width = parseFloat(widthInput.value);\n                // Calculate height using precise ratio\n                const height = (width * ratioHeight) / ratioWidth;\n                heightInput.value = height.toFixed(2);\n            } else if (heightInput.value) {\n                const height = parseFloat(heightInput.value);\n                // Calculate width using precise ratio\n                const width = (height * ratioWidth) / ratioHeight;\n                widthInput.value = width.toFixed(2);\n            }\n        }\n        \n        updateDisplay();\n        updateStatusMessages();\n    }\n}\n\nfunction toggleRatioLock() {\n    isRatioLocked = !isRatioLocked;\n    \n    if (isRatioLocked) {\n        lockButton.innerHTML = '<i class=\"fas fa-lock\"></i> Ratio Locked';\n        lockButton.classList.add('active');\n    } else {\n        lockButton.innerHTML = '<i class=\"fas fa-lock-open\"></i> Ratio Unlocked';\n        lockButton.classList.remove('active');\n    }\n    \n    updateStatusMessages();\n}\n\nfunction swapDimensions() {\n    const tempWidth = widthInput.value;\n    const tempHeight = heightInput.value;\n    \n    widthInput.value = tempHeight;\n    heightInput.value = tempWidth;\n        \n    // Update the pixel values\n    pixelWidth = parseInt(widthInput.value) || 0;\n    pixelHeight = parseInt(heightInput.value) || 0;\n    \n    updateDisplay();\n}\n\nfunction resetCalculator() {\n    // Reset inputs\n    widthInput.value = '';\n    heightInput.value = '';\n    ratioWidthInput.value = '';\n    ratioHeightInput.value = '';\n    \n    // Reset variables\n    ratioWidth = 16;\n    ratioHeight = 9;\n    pixelWidth = 1920;\n    pixelHeight = 1080;\n    isRatioLocked = true;\n    \n    // Update UI\n    lockButton.innerHTML = '<i class=\"fas fa-lock\"></i> Ratio Locked';\n    lockButton.classList.add('active');\n    \n    // Update display\n    updateDisplay();\n}\n\nfunction updateDisplay() {\n    const width = parseFloat(widthInput.value);\n    const height = parseFloat(heightInput.value);\n    \n    if (!isNaN(width) && !isNaN(height) && width > 0 && height > 0) {\n        // Calculate the actual ratio using GCD\n        const gcd = calculateGCD(Math.round(width), Math.round(height));\n        const ratioW = Math.round(width / gcd);\n        const ratioH = Math.round(height / gcd);\n        \n        // Update the result display\n        resultElement.textContent = `Aspect Ratio: ${ratioW}:${ratioH}`;\n        decimalElement.textContent = `Decimal: ${(width/height).toFixed(3)}:1`;\n        \n        // Update the preview\n        const maxWidth = 400;\n        const maxHeight = 300;\n        const scale = Math.min(maxWidth / width, maxHeight / height);\n        \n        aspectPreview.style.width = `${width * scale}px`;\n        aspectPreview.style.height = `${height * scale}px`;\n        aspectPreview.style.opacity = '1';\n    } else {\n        resultElement.textContent = 'Aspect Ratio: -';\n        decimalElement.textContent = 'Decimal: -';\n        aspectPreview.style.opacity = '0';\n    }\n}\n\nfunction updateStatusMessages() {\n    // Update width status\n    if (widthInput.value) {\n        widthStatus.textContent = `Width: ${widthInput.value}px`;\n        widthStatus.className = 'status-message success';\n    } else {\n        widthStatus.textContent = 'Enter width to calculate height';\n        widthStatus.className = 'status-message info';\n    }\n\n    // Update height status\n    if (heightInput.value) {\n        heightStatus.textContent = `Height: ${heightInput.value}px`;\n        heightStatus.className = 'status-message success';\n    } else {\n        heightStatus.textContent = 'Enter height to calculate width';\n        heightStatus.className = 'status-message info';\n    }\n\n    // Update ratio status\n    if (isRatioLocked) {\n        ratioStatus.textContent = 'Ratio is locked - dimensions will maintain proportion';\n        ratioStatus.className = 'status-message info';\n    } else {\n        ratioStatus.textContent = 'Ratio is unlocked - dimensions can be set independently';\n        ratioStatus.className = 'status-message warning';\n    }\n\n    // Update custom ratio status\n    if (ratioWidthInput.value && ratioHeightInput.value) {\n        customRatioStatus.textContent = `Custom Aspect Ratio: ${ratioWidthInput.value}:${ratioHeightInput.value}`;\n        customRatioStatus.className = 'status-message success';\n        } else {\n        customRatioStatus.textContent = 'Enter custom ratio values';\n        customRatioStatus.className = 'status-message info';\n        }\n\n    // Update preset status\n    if (ratioWidthInput.value && ratioHeightInput.value) {\n        presetStatus.textContent = 'Click a ratio to update custom ratio';\n        presetStatus.className = 'status-message info';\n    } else {\n        presetStatus.textContent = 'Click a ratio to set custom ratio';\n        presetStatus.className = 'status-message info';\n    }\n}\n\n// Event Listeners\nwidthInput.addEventListener('input', () => {\n    if (isRatioLocked && ratioWidthInput.value && ratioHeightInput.value) {\n        const width = parseFloat(widthInput.value) || 0;\n        if (width > 0) {\n            const ratioW = parseFloat(ratioWidthInput.value);\n            const ratioH = parseFloat(ratioHeightInput.value);\n            const height = (width * ratioH) / ratioW;\n            heightInput.value = height.toFixed(2);\n        }\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\n\nheightInput.addEventListener('input', () => {\n    if (isRatioLocked && ratioWidthInput.value && ratioHeightInput.value) {\n        const height = parseFloat(heightInput.value) || 0;\n        if (height > 0) {\n            const ratioW = parseFloat(ratioWidthInput.value);\n            const ratioH = parseFloat(ratioHeightInput.value);\n            const width = (height * ratioW) / ratioH;\n            widthInput.value = width.toFixed(2);\n        }\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\n\nratioWidthInput.addEventListener('input', () => {\n    updateRatio();\n    if (isRatioLocked && widthInput.value) {\n        const width = parseFloat(widthInput.value);\n        const ratioW = parseFloat(ratioWidthInput.value);\n        const ratioH = parseFloat(ratioHeightInput.value);\n        const height = (width * ratioH) / ratioW;\n        heightInput.value = height.toFixed(2);\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\n\nratioHeightInput.addEventListener('input', () => {\n    updateRatio();\n    if (isRatioLocked && heightInput.value) {\n        const height = parseFloat(heightInput.value);\n        const ratioW = parseFloat(ratioWidthInput.value);\n        const ratioH = parseFloat(ratioHeightInput.value);\n        const width = (height * ratioW) / ratioH;\n        widthInput.value = width.toFixed(2);\n    }\n    updateDisplay();\n    updateStatusMessages();\n});\n\nresetButton.addEventListener('click', resetCalculator);\nlockButton.addEventListener('click', toggleRatioLock);\nswapButton.addEventListener('click', swapDimensions);\n\n// Preset ratio buttons\ndocument.querySelectorAll('.preset').forEach(button => {\n    button.addEventListener('click', () => {\n        const [w, h] = button.dataset.ratio.split(':').map(Number);\n        \n        // ONLY update the custom ratio inputs\n        ratioWidthInput.value = w;\n        ratioHeightInput.value = h;\n        \n        // Update preset status\n        presetStatus.textContent = `Selected ratio: ${w}:${h}`;\n        presetStatus.className = 'status-message success';\n        \n        // Trigger the custom ratio update\n        updateRatio();\n    });\n});\n\n// Navigation event listeners\nnavLinks.forEach(link => {\n    link.addEventListener('click', (e) => {\n        e.preventDefault();\n        const sectionId = e.target.getAttribute('href').substring(1);\n        showSection(sectionId);\n        history.pushState(null, '', `#${sectionId}`);\n    });\n});\n\n// Tab switching event listeners\ntabButtons.forEach(button => {\n    button.addEventListener('click', () => {\n        const tabId = button.getAttribute('data-tab');\n        showTab(tabId);\n        });\n});\n\n// Handle initial state based on URL hash\ndocument.addEventListener('DOMContentLoaded', () => {\n    const hash = window.location.hash.substring(1);\n    if (hash) {\n        showSection(hash);\n        } else {\n        showSection('calculator-section');\n    }\n    // Set initial state of ratio lock button\n    lockButton.innerHTML = '<i class=\"fas fa-lock\"></i> Ratio Locked';\n    lockButton.classList.add('active');\n    updateDisplay();\n    updateStatusMessages();\n});\n\n// Handle browser back/forward\nwindow.addEventListener('popstate', () => {\n    const hash = window.location.hash.substring(1);\n    if (hash) {\n        showSection(hash);\n    } else {\n        showSection('calculator-section');\n    }\n});\n\nfunction showSection(sectionId) {\n    sections.forEach(section => {\n        section.classList.add('hidden');\n    });\n    document.getElementById(sectionId).classList.remove('hidden');\n\n    // Update active nav link\n    navLinks.forEach(link => {\n        link.classList.remove('active');\n        if (link.getAttribute('href') === `#${sectionId}`) {\n            link.classList.add('active');\n            }\n        });\n}\n\nfunction showTab(tabId) {\n    tabContents.forEach(content => {\n            content.classList.add('hidden');\n});\n    document.getElementById(tabId).classList.remove('hidden');\n    \n    // Update active tab button\n    tabButtons.forEach(button => {\n        button.classList.remove('active');\n        if (button.getAttribute('data-tab') === tabId) {\n            button.classList.add('active');\n            }\n    });\n}"],"names":["isRatioLocked","ratioWidth","ratioHeight","pixelWidth","pixelHeight","widthInput","document","getElementById","heightInput","ratioWidthInput","ratioHeightInput","resultElement","simplifiedElement","decimalElement","aspectPreview","resetButton","lockButton","swapButton","sections","querySelectorAll","navLinks","tabButtons","tabContents","widthStatus","heightStatus","ratioStatus","presetStatus","customRatioStatus","updateDimensions","widthValue","parseInt","value","heightValue","updateDisplay","Math","round","updateStatusMessages","calculateGCD","a","b","abs","temp","updateRatio","newWidth","parseFloat","newHeight","height","width","toFixed","toggleRatioLock","innerHTML","classList","add","remove","swapDimensions","tempWidth","resetCalculator","isNaN","gcd","ratioW","ratioH","textContent","scale","min","maxWidth","maxHeight","style","opacity","className","showSection","sectionId","forEach","section","link","getAttribute","showTab","tabId","content","button","addEventListener","w","h","dataset","ratio","split","map","Number","e","preventDefault","target","substring","history","pushState","hash","window","location"],"version":3,"file":"aspect-ratio-pro.6189c723.js.map"}